name: Build FFmpeg
on: workflow_dispatch

jobs:
  build-macos:
    name: Build macOS
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ilammy/setup-nasm@v1

      - name: Build
        run: osu.Framework.NativeLibs/scripts/ffmpeg/build-macOS.sh
        env:
          arch: ${{ matrix.arch }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: macOS-${{ matrix.arch }}
          path: macOS-${{ matrix.arch }}

  combine-macos:
    name: Combine macOS libs
    runs-on: macos-12
    needs: build-macos
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: macOS-x86_64
          path: macOS-x86_64
      - uses: actions/download-artifact@v4
        with:
          name: macOS-arm64
          path: macOS-arm64

      - name: Combine
        run: osu.Framework.NativeLibs/scripts/ffmpeg/combine_dylibs.sh

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: macOS-universal
          path: macOS-universal

  build-win:
    name: Build Windows (${{ matrix.arch }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x64
          - x86
          - arm64
    container:
      image: mstorsjo/llvm-mingw:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install nasm mingw-w64

      - name: Build
        run: osu.Framework.NativeLibs/scripts/ffmpeg/build-win.sh
        env:
          arch: ${{ matrix.arch }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: win-${{ matrix.arch }}
          path: win-${{ matrix.arch }}

  build-linux:
    name: Build Linux (${{ matrix.arch }})
    # Use 20.04 to target glibc 2.31 like the other native libs
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - { arch: x64, container: "ubuntu:20.04" }
          - { arch: x86, container: "i386/ubuntu:20.04" }
          - { arch: arm64, container: "arm64v8/ubuntu:20.04" }
          - { arch: arm, container: "arm32v7/ubuntu:20.04" }
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        if: ${{ contains(matrix.arch, 'arm') }}
        uses: docker/setup-qemu-action@v2

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.container }}
          options: -v ${{ github.workspace }}:/workspace -w /workspace
          run: |
            apt-get update
            apt-get install build-essential curl nasm libva-dev libvdpau-dev
            osu.Framework.NativeLibs/scripts/ffmpeg/build-linux.sh

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: linux-${{ matrix.arch }}

  make-pr:
    name: Create pull request
    runs-on: ubuntu-22.04
    needs:
      - combine-macos
      - build-win
      - build-linux
    strategy:
      matrix:
        include:
          - { name: macOS-universal, path: osu.Framework.NativeLibs/runtimes/osx/native }
          - { name: linux-arm64, path: osu.Framework.NativeLibs/runtimes/linux-arm64/native}
          - { name: linux-arm, path: osu.Framework.NativeLibs/runtimes/linux-arm/native}
          - { name: linux-x64, path: osu.Framework.NativeLibs/runtimes/linux-x64/native}
          - { name: linux-x86, path: osu.Framework.NativeLibs/runtimes/linux-x86/native}
          - { name: win-arm64, path: osu.Framework.NativeLibs/runtimes/win-arm64/native}
          - { name: win-x64, path: osu.Framework.NativeLibs/runtimes/win-x64/native}
          - { name: win-x86, path: osu.Framework.NativeLibs/runtimes/win-x86/native}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.path }}

      - uses: peter-evans/create-pull-request@v6
        with:
          commit-message: Update FFmpeg binaries
          title: Update FFmpeg binaries
          body: This PR has been auto-generated to update the FFmpeg binaries.
          branch: update-ffmpeg-binaries
          delete-branch: true
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
